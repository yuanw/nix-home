* TODO

** TODO setup vterm with mewo insert mode
** TODO turn off modeline for vterm
** TODO keycast-mode-line does not work with telephone-line-mode nor doom-modeline


* Configure emacs from scratch with nix
doom emacs is my gateway to emacs. For the first time, I can be as productive if not more
in other editor or IDE. I didn't how to quit vi/m before that.


* cheatsheet

~SPC m x~ to ~M-x~turn of keycast mode is
~SPC m x~ ~keycast~
keycast-tab-bar-mode

~SPC x s~ ~C-x C-s~ save-buffer
~SPC x d~  ~C-x C-d~  consult-dir
~project-switch-project~ bind to ~C-x p p~ in meow is ~SPC x SPC p p~

how to compile elisp snippet

~C-c '~ (org-edit-special). This opens another buffer in emacs-lisp-mode,

org-edit-special call org-edit-src-code when it in a source code block, which edit the source or example
block at point.


so you can use ~M-x eval-buffer~ to load the changes.
If you want to explore how functions work, use ~M-x edebug-defun~ to set up debugging for t

* Other emacs configurations inspired me

https://github.com/jwiegley/dot-emacs/blob/master/init.org
https://www.patrickdelliott.com/emacs.d/#org256bd49
https://www.lucacambiaghi.com/vanilla-emacs/readme.html#h:0642C8C0-3B4E-4C72-BD41-40F58FFAB736

* GC
#+begin_src elisp
(setq gc-cons-percentage 0.5
      gc-cons-threshold (* 128 1024 1024))
#+end_src


* use-package
use nix for the actual package management, use-package for configuration.
there is leaf.

https://emacs.stackexchange.com/questions/33591/use-package-does-not-execute-config
(message "DEBUG: my-shortconfig start")

;; init package and use-package
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(require 'package)
(package-initialize)
(require 'use-package)

;; auto-complete-config:
(use-package auto-complete
    :commands (global-auto-complete-mode auto-complete auto-complete-mode)
    :bind ("M-<tab>" . my--auto-complete)
    :bind (:map ac-mode-map
                ("M-<tab>" . auto-complete))
    :init (progn
              (message "DEBUG: auto-complete-config init")
              (defun my--auto-complete ()
                  (interactive)
                  (message "DEBUG: my--auto-complete inside")
                  (unless (boundp 'auto-complete-mode)
                      (require 'auto-complete-config)
                      (global-set-key (kbd "M-<tab>") nil)
                      (global-auto-complete-mode 1))
                  (auto-complete))
              (setq ac-auto-start nil
                    ac-quick-help-delay 0.5))
    :config (progn
                (message "DEBUG: auto-complete-config config")))

(message "DEBUG: my-shortconfig done")

#+begin_src elisp
(eval-and-compile
  (defsubst emacs-path (path)
    (expand-file-name path user-emacs-directory))

  (setq package-enable-at-startup nil
        load-path
        (append (list (emacs-path "use-package"))
                (delete-dups load-path)
                (list (emacs-path "lisp")))))
(require 'use-package)

(setq use-package-verbose init-file-debug
      use-package-expand-minimally (not init-file-debug)
      use-package-compute-statistics t
      debug-on-error init-file-debug)
#+end_src

* Global variables
#+begin_src elisp
(defconst emacs-environment (system-name))

(defconst emacs-data-suffix
  (cond ((string= "emacsERC" emacs-environment) "alt")
        ((string-match "emacs2[6789]\\(.+\\)$" emacs-environment)
         (match-string 1 emacs-environment))))

(defconst alternate-emacs (string= emacs-data-suffix "alt"))

(defconst user-data-directory
  (emacs-path (if emacs-data-suffix
                  (format "data-%s" emacs-data-suffix)
                "data")))

(defun user-data (dir)
  (expand-file-name dir user-data-directory))
  #+end_src

* Load env
so I can get JAVA_HOME and jdtls working with emacs daemon

#+begin_src elisp
(use-package exec-path-from-shell
  :when (daemonp )
  :config
  (exec-path-from-shell-initialize))
#+end_src
* auto-revert
 ;; Activate auto-revert for dired buffers which are not included in
this and backup are probably the first things need to changed
#+begin_src elisp
  (use-package autorevert
    :hook (dired-mode . auto-revert-mode)
    :custom
    (auto-revert-use-notify nil)
    :config
    (global-auto-revert-mode t))

#+end_src

* Backup file
#+begin_src elisp

;; Don't generate backups or lockfiles. While auto-save maintains a copy so long
;; as a buffer is unsaved, backups create copies once, when the file is first
;; written, and never again until it is killed and reopened. This is better
;; suited to version control, and I don't want world-readable copies of
;; potentially sensitive material floating around our filesystem.
(setq create-lockfiles nil
      make-backup-files nil
      ;; But in case the user does enable it, some sensible defaults:
      version-control t     ; number each backup file
      backup-by-copying t   ; instead of renaming current file (clobbers links)
      delete-old-versions t ; clean up after itself
      kept-old-versions 5
      kept-new-versions 5
      backup-directory-alist (list ( user-data "backup/"))
      tramp-backup-directory-alist backup-directory-alist)

;; But turn on auto-save, so we have a fallback in case of crashes or lost data.
;; Use `recover-file' or `recover-session' to recover them.
(setq auto-save-default t
      ;; Don't auto-disable auto-save after deleting big chunks. This defeats
      ;; the purpose of a failsafe. This adds the risk of losing the data we
      ;; just deleted, but I believe that's VCS's jurisdiction, not ours.
      auto-save-include-big-deletions t
      ;; Keep it out of `doom-emacs-dir' or the local directory.
      auto-save-list-file-prefix (user-data "autosave/")
      tramp-auto-save-directory  (user-data "tramp-autosave/")
      auto-save-file-name-transforms
      (list (list "\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'"
                  ;; Prefix tramp autosaves to prevent conflicts with local ones
                  (concat auto-save-list-file-prefix "tramp-\\2") t)
            (list ".*" auto-save-list-file-prefix t)))

#+end_src

* Reload configuration
#+begin_src elisp
 (defun my-reload-emacs-configuration ()
      "reload my emacs configuratio"
      (interactive)

    (load-file "~/workspaces/nix-home/modules/editor/emacs/config/init.el"))
#+end_src
* Meow
https://github.com/meow-edit/meow

it's not a good idea to have a complex leader keymap
here we create bindings for necessary, high frequency commands


https://github.com/DogLooksGood/dogEmacs/blob/master/elisp/init-modal.el
#+begin_src elisp
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
       (meow-motion-overwrite-define-key
        '("j" . meow-next)
        '("k" . meow-prev)
        '("<escape>" . ignore))
      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION state.
       '("j" . "H-j")
       '("k" . "H-k")
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
   )
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("d" . meow-delete)
       '("D" . meow-backward-delete)
       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("g" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-next)
       '("J" . meow-next-expand)
       '("k" . meow-prev)
       '("K" . meow-prev-expand)
       '("l" . meow-right)
       '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("p" . meow-yank)
       '("q" . meow-quit)
       '("Q" . meow-goto-line)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-goto-line)
       '("y" . meow-save)
       '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("<escape>" . ignore)))
    (use-package meow
      :demand t
      :preface
      (defun meow-clipboard-toggle ()
        (interactive)
  (if meow-use-clipboard
      (progn
        (setq meow-use-clipboard nil)
        (message "Meow clipboard usage disabled"))
    (progn
      (setq meow-use-clipboard t)
      (message "Meow clipboard usage enabled"))))

      :config
      (setq meow-use-clipboard t)
      (meow-setup)
      (meow-global-mode 1))

  (use-package emacs
      :custom
      (tool-bar-mode nil)             ; Hide the outdated icons
      (scroll-bar-mode nil)           ; Hide the always-visible scrollbar
      (inhibit-splash-screen t) ; Remove the "Welcome to GNU Emacs" splash screen
      (use-file-dialog nil)      ; Ask for textual confirmation instead of GUI
      (menu-bar-mode nil)
      (scroll-bar-mode nil)
      (initial-frame-alist '((undecorated . t))) ;; turn off frame title
      :config (setq ring-bell-function #'ignore)
        )
#+end_src
* sane default
In confirmation dialogues, we want to be able to type y and n instead of having to spell the whole words:


Make everything use UTF-8:
#+begin_src elisp

(use-package emacs
  :init
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8
        coding-system-for-read 'utf-8
        coding-system-for-write 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix)))

(use-package emacs
  :init
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2))

(use-package emacs
  :init
	(when (eq system-type 'darwin)
		(setq mac-command-modifier 'super)
		(setq mac-option-modifier 'meta)
		(setq mac-control-modifier 'control)))

#+end_src


#+end_src

* dired
#+begin_src elisp
  (use-package dired
     :commands dired-jump
    :diminish dired-omit-mode
     :hook
     (dired-mode . dired-hide-details-mode)
     (dired-mode . dired-omit-mode)
     (dired-mode .   (lambda () (load "dired-x")))
    :custom
    (dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'\\|^\\.DS_Store\\'\\|^\\.project\\(?:ile\\)?\\'\\|^\\.\\(?:svn\\|git\\)\\'\\|^\\.ccls-cache\\'\\|\\(?:\\.js\\)?\\.meta\\'\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'")
    (dired-dwim-target t)

    )

#+end_src

* saveplace
#+begin_src elisp
(use-package saveplace
  :unless noninteractive
  :custom
  (save-place-file (user-data "places"))
  :config
  (save-place-mode 1))
#+end_src

* recentf
#+begin_src elisp
(use-package recentf
  :demand t
  :commands (recentf-mode
             recentf-add-file
             recentf-apply-filename-handlers)
  :custom
  (recentf-auto-cleanup 60)
  (recentf-exclude
   '("~\\'" "\\`out\\'" "\\.log\\'" "^/[^/]*:" "\\.el\\.gz\\'"))
  (recentf-max-saved-items 2000)
  (recentf-save-file (user-data "recentf"))
  :preface
  (defun recentf-add-dired-directory ()
    "Add directories visit by dired into recentf."
    (if (and dired-directory
             (file-directory-p dired-directory)
             (not (string= "/" dired-directory)))
        (let ((last-idx (1- (length dired-directory))))
          (recentf-add-file
           (if (= ?/ (aref dired-directory last-idx))
               (substring dired-directory 0 last-idx)
             dired-directory)))))
  :hook (dired-mode . recentf-add-dired-directory)
  :config
  (recentf-mode 1))

#+end_src






* Which key
#+begin_src elisp
(use-package which-key
  :demand t
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " → " )

    (which-key-mode)
  )

#+end_src


* Font and theme

#+begin_src elisp
  (set-face-attribute 'default nil
    :font "PragmataPro Mono Liga"
    :height 180
    :weight 'medium)

  (use-package doom-themes
    :demand
    :config
    (load-theme 'doom-palenight t))
  (use-package doom-modeline
    :disabled
    :config (doom-modeline-mode 1))

  (use-package telephone-line

    :config

    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
        telephone-line-primary-right-separator 'telephone-line-cubed-right
        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
  (setq telephone-line-height 24)
  (setq telephone-line-evil-use-short-tag t)
  (telephone-line-defsegment* telephone-line-simpler-major-mode-segment ()
    (concat "["
            (if (listp mode-name)
                (car mode-name)
              mode-name)
            "]"))

  (telephone-line-defsegment* telephone-line-simple-pos-segment ()
    (concat "%c : " "%l/" (number-to-string (count-lines (point-min) (point-max)))))

  (setq telephone-line-lhs
        '((nil . (telephone-line-projectile-buffer-segment))
          (accent . (telephone-line-simpler-major-mode-segment))
          (nil . (telephone-line-meow-tag-segment
                  telephone-line-misc-info-segment)))
        telephone-line-rhs
        '((nil . (telephone-line-simple-pos-segment))
          (accent . (telephone-line-buffer-modified-segment))))

  (telephone-line-mode 1)

  )


  (use-package nerd-icons)

  (defun pixel-scroll-setup ()
    (interactive)
    (setq pixel-scroll-precision-large-scroll-height 1)
    (setq pixel-scroll-precision-interpolation-factor 1))

  (when (boundp 'pixel-scroll-precision-mode)
    (pixel-scroll-setup)
    (add-hook 'prog-mode-hook #'pixel-scroll-precision-mode)
    (add-hook 'org-mode-hook #'pixel-scroll-precision-mode))
#+end_src

* orderless
#+begin_src elisp
(use-package orderless
  :demand t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides
   '((file (styles basic partial-completion)))))

#+end_src

* super-save
try it out, save-buffer
#+begin_src elisp
  (use-package super-save
    :disabled
  :defer 1
  :diminish super-save-mode
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t))
#+end_src

* auto-save
#+begin_src elisp
(require 'auto-save)
(auto-save-enable)

(setq auto-save-silent t)   ; quietly save
(setq auto-save-delete-trailing-whitespace t)  ; automatically delete spaces at the end of the line when saving

;;; custom predicates if you don't want auto save.
;;; disable auto save mode when current filetype is an gpg file.
(setq auto-save-disable-predicates
      '((lambda ()
      (string-suffix-p
      "gpg"
      (file-name-extension (buffer-name)) t))))
#+end_src

* embark
https://github.com/oantolin/embark
#+begin_src elisp
(use-package marginalia
  :config
  (marginalia-mode))

(use-package embark

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

* corfu and cape
https://github.com/minad/corfu

https://github.com/minad/cape
#+begin_src elisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    (corfu-quit-no-match t)       ;; Never quit, even if there is no match
    (corfu-preview-current nil)    ;; Disable current candidate preview
    (corfu-preselect 'prompt)      ;; Preselect the prompt
    (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :config
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  ;; Add extensions
  (use-package cape

    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-elisp-symbol)
           ("C-c p e" . cape-elisp-block)
           ("C-c p a" . cape-abbrev)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p :" . cape-emoji)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )
#+end_src

* kind-icon




#+begin_src elisp
  (use-package kind-icon
  :after corfu
  ;:custom
  ; (kind-icon-blend-background t)
  ; (kind-icon-default-face 'corfu-default) ; only needed with blend-background
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src


* consult
https://github.com/minad/consult

#+begin_src elisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind  (([remap repeat-complex-command] . consult-complex-command)
           ([remap switch-to-buffer] . consult-buffer)
           ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
           ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
           ([remap project-switch-to-buffer] . consult-project-buffer)
           ([remap bookmark-jump] . consult-bookmark)

           ;; ([remap find-file] . consult-find)
           ;; ([Remap imenu] . consult-imenu)
           ([remap yank-pop] . consult-yank-pop)
           ("C-c M-x" . consult-mode-command)
           ("C-c h"   . consult-history)
           ("C-c K"   . consult-kmacro)
           ;; ("C-c i"   . consult-info)
            ;; M-s bindings (search-map)
         ("M-s f"   . consult-find)
         ("M-s M-g" . consult-grep)
         ("M-s g"   . consult-ripgrep)
         ("M-s G"   . consult-git-grep)
         ("M-s r"   . consult-ripgrep)
         ("M-s l"   . consult-line)
         ("M-s L"   . consult-line-multi)
         ("M-s k"   . consult-keep-lines)
         ("M-s u"   . consult-focus-lines)
           )
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    :custom
    ;; (consult-preview-key "M-i")
    (consult-narrow-key "<")

    :custom-face
    (consult-file ((t (:inherit font-lock-string-face))))

    :functions
    (consult-register-format
     consult-register-window
     consult-xref)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config
    (use-package consult-xref)
    (use-package consult-register)

    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep
     consult-git-grep
     consult-grep
     consult-bookmark
     consult-recent-file
     consult-xref
     consult--source-bookmark
     consult--source-file-register
     consult--source-recent-file
     consult--source-project-recent-file
     :preview-key '(:debounce 0.4 any))

    )
  #+end_src

* vertico
https://github.com/minad/vertico
#+begin_src elisp
      ;; Enable vertico
     (use-package vertico
        :config
        (vertico-mode)

        ;; Different scroll margin
        (setq vertico-scroll-margin 0)

        ;; Show more candidates
        ;; (setq vertico-count 20)

        ;; Grow and shrink the Vertico minibuffer
        (setq vertico-resize t)
        ;;(setq vertico-preselect 'prompt)


        ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
         (setq vertico-cycle t))

      (use-package vertico-directory
      :bind (:map vertico-map
                  ("RET" . vertico-directory-enter)
                  ("DEL" . vertico-directory-delete-char)
                  ("M-DEL" . vertico-directory-delete-word))
      ;; Tidy shadowed file names
      :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)

      )

    ;; (use-package vertico-quick
    ;;   :demand t
    ;;   :after vertico
    ;;   :bind (
    ;;          :map vertico-map
    ;;          ("M-q" . vertico-quick-insert)
    ;;          ("C-q" . vertico-quick-exit))
    ;;   :init
    ;;   (progn
    ;;     (setq vertico-quick1 "haio")
    ;;     (setq vertico-quick2 "luy")))

    ;; (use-package vertico-multiform
    ;;   :demand t
    ;;   :after vertico
    ;;   :config
    ;;   (progn
    ;;     (vertico-multiform-mode)

    ;;     (setq vertico-multiform-commands
    ;;           '(;; show grep results in a dedicated buffer:
    ;;             (consult-ripgrep buffer)))))

 

      ;; A few more useful configurations...
      (use-package emacs
        :init
        ;; Add prompt indicator to `completing-read-multiple'.
        ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
        (defun crm-indicator (args)
          (cons (format "[CRM%s] %s"
                        (replace-regexp-in-string
                         "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                         crm-separator)
                        (car args))
                (cdr args)))
        (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

        ;; Do not allow the cursor in the minibuffer prompt
        (setq minibuffer-prompt-properties
              '(read-only t cursor-intangible t face minibuffer-prompt))
        (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

        ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
        ;; Vertico commands are hidden in normal buffers.
         (setq read-extended-command-predicate
               #'command-completion-default-include-p)

        ;; Enable recursive minibuffers
        ;;(setq enable-recursive-minibuffers t)
  )

#+end_src


* consult-dir
https://github.com/karthink/consult-dir
https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-consult.el#L297
#+begin_src elisp
 (use-package consult-dir
  :bind (("M-g d" . consult-dir)
         :map minibuffer-local-filename-completion-map
         ("M-g d" . consult-dir)
         ("M-s f" . consult-dir-jump-file)
         ;; :map embark-become-file+buffer-map
         ;; ("d" . consult-dir)
         )
  :init
  (use-package vertico
    :bind (:map vertico-map
           ("M-g d" . consult-dir)
           ("M-s f" . consult-dir-jump-file)
           ))
   :config
  (add-to-list 'consult-dir-sources 'consult-dir--source-tramp-ssh t)
  (setq consult-dir-shadow-filenames nil))
#+end_src


https://gitlab.com/skybert/my-little-friends/-/blob/master/emacs/.emacs
#+begin_src elisp
;; Minimising & quitting Emacs way too many times without wanting to.
(global-unset-key "\C-z")
(global-unset-key "\C-x\C-c")
(global-unset-key "\C-x\C-b") ;; list-buffer, i just use switch-buffer
(global-unset-key "\C-x\C-d") ;; list-directory, i just use dired

#+end_src



* avy
#+begin_src elisp
  (use-package avy
    :bind ("C-." . avy-goto-char-timer)
         ([remap goto-line] . avy-goto-line)
    :custom
    (avy-case-fold-search t)
    (avy-timeout-seconds 0.5)
  )

#+end_src

* magit
#+begin_src elisp
     (use-package magit
    :demand t
      :bind (("C-x g" . magit-status))
     :bind (:map magit-mode-map
                 ("U" . magit-unstage-all)
                 ("k" . magit-discard)
                 )
       :custom
       (magit-list-refs-sortby "-committerdate"))
 
#+end_src

* after eglot and orderless

#+begin_src elisp
  (use-package eglot-orderless
  :no-require t
  :after (eglot orderless)
  :config
  (add-to-list 'completion-category-overrides
               '(eglot (styles orderless basic))))
#+end_src

* flycheck with eglot
#+begin_src elisp
  (use-package flycheck-eglot
  :after (flycheck eglot)
  :config
  (global-flycheck-eglot-mode 1))
#+end_src



* nix
#+begin_src elisp
(use-package nix-mode
  :mode "\\.nix\\'"
  :custom
  (nix-indent-function 'nix-indent-line))

#+end_src

* direnv

#+begin_src elisp
    (use-package direnv
    )
#+end_src

* haskell mode
steal from jwiegley

#+begin_src elisp

(use-package haskell-mode
  :mode (("\\.hs\\(c\\|-boot\\)?\\'" . haskell-mode)
         ("\\.lhs\\'" . haskell-literate-mode)
         ("\\.cabal\\'" . haskell-cabal-mode))
  :bind (:map
         haskell-mode-map
         ("C-c C-h" . my-haskell-hoogle)
         ("C-c C-," . haskell-navigate-imports)
         ("C-c C-." . haskell-mode-format-imports)
         ("C-c C-u" . my-haskell-insert-undefined)
         ("C-c C-z" . haskell-interactive-switch)
         ("M-s")
         ("M-t"))
  :hook
  (haskell-mode . my-haskell-mode-hook)
  :custom
  (haskell-compile-cabal-build-command
   "cd %s && cabal new-build --ghc-option=-ferror-spans")
  (haskell-hasktags-arguments '("-e"))
  (haskell-tags-on-save t)
  (haskell-hoogle-command nil)
  (haskell-indent-spaces 2)
  (haskell-indentation-ifte-offset 2)
  (haskell-indentation-layout-offset 2)
  (haskell-indentation-left-offset 2)
  (haskell-indentation-starter-offset 2)
  (haskell-indentation-where-post-offset 2)
  (haskell-indentation-where-pre-offset 0)
  (haskell-process-args-cabal-repl
   '("--ghc-option=-ferror-spans"
     "--repl-options=-Wno-missing-home-modules"
     "--repl-options=-ferror-spans"))
  (haskell-process-load-or-reload-prompt t)
  :functions
  (haskell-check-remove-overlays
   haskell-goto-next-error
   haskell-goto-prev-error
   haskell-process-consume
   haskell-process-errors-warnings
   haskell-process-extract-modules
   haskell-process-import-modules
   haskell-process-reload-with-fbytecode
   haskell-process-response-cursor
   haskell-process-set-response-cursor
   haskell-session-name)
  :preface
  (defun my-haskell-insert-undefined ()
    (interactive) (insert "undefined"))

  (defun snippet (name)
    (interactive "sName: ")
    (find-file (expand-file-name (concat name ".hs") "~/src/notes"))
    (haskell-mode)
    (goto-char (point-min))
    (when (eobp)
      (insert "hdr")
      (yas-expand)))

  (defvar hoogle-server-process nil)

  (defun my-haskell-hoogle (query &optional _arg)
    "Do a Hoogle search for QUERY."
    (interactive
     (let ((def (haskell-ident-at-point)))
       (if (and def (symbolp def)) (setq def (symbol-name def)))
       (list (read-string (if def
                              (format "Hoogle query (default %s): " def)
                            "Hoogle query: ")
                          nil nil def)
             current-prefix-arg)))
    (let ((pe process-environment)
          (ep exec-path)
          ;; (default-hoo (expand-file-name
          ;;               "default.hoo"
          ;;               (locate-dominating-file "." "default.hoo")))
          )
      (unless (and hoogle-server-process
                   (process-live-p hoogle-server-process))
        (message "Starting local Hoogle server on port 8687...")
        (with-current-buffer (get-buffer-create " *hoogle-web*")
          (cd temporary-file-directory)
          (let ((process-environment pe)
                (exec-path ep))
            (setq hoogle-server-process
                  (start-process "hoogle-web" (current-buffer)
                                 (executable-find "hoogle")
                                 "server"
                                 ;; (concat "--database=" default-hoo)
                                 "--local" "--port=8687"))))
        (message "Starting local Hoogle server on port 8687...done")))
    (browse-url
     (format "http://127.0.0.1:8687/?hoogle=%s"
             (replace-regexp-in-string
              " " "+" (replace-regexp-in-string "\\+" "%2B" query)))))

  (defvar haskell-prettify-symbols-alist
    '(("::"     . ?∷)
      ("forall" . ?∀)
      ("exists" . ?∃)
      ("->"     . ?→)
      ("<-"     . ?←)
      ("=>"     . ?⇒)
      ("~>"     . ?⇝)
      ("<~"     . ?⇜)
      ("<>"     . ?⨂)
      ("msum"   . ?⨁)
      ("\\"     . ?λ)
      ("not"    . ?¬)
      ("&&"     . ?∧)
      ("||"     . ?∨)
      ("/="     . ?≠)
      ("<="     . ?≤)
      (">="     . ?≥)
      ("<<<"    . ?⋘)
      (">>>"    . ?⋙)

      ("`elem`"             . ?∈)
      ("`notElem`"          . ?∉)
      ("`member`"           . ?∈)
      ("`notMember`"        . ?∉)
      ("`union`"            . ?∪)
      ("`intersection`"     . ?∩)
      ("`isSubsetOf`"       . ?⊆)
      ("`isNotSubsetOf`"    . ?⊄)
      ("`isSubsequenceOf`"  . ?⊆)
      ("`isProperSubsetOf`" . ?⊂)
      ("undefined"          . ?⊥)))

  (defun my-update-cabal-repl (&rest _args)
    (let ((it (getenv "CABAL_REPL")))
      (when it
        (let ((args (nthcdr 2 (split-string it))))
          (setq-local haskell-process-args-cabal-repl
                      (delete-dups
                       (append haskell-process-args-cabal-repl args)))))))

  ;; (eval-when-compile
  ;;   (require 'diminish))

  (defun my-haskell-mode-hook ()
    (haskell-indentation-mode)
    (whitespace-mode 1)
    (bug-reference-prog-mode 1)

    (setq-local prettify-symbols-alist haskell-prettify-symbols-alist)
    (prettify-symbols-mode 1)

    (advice-add 'direnv-update-directory-environment
                :after #'my-update-cabal-repl)

    (when (executable-find "ormolu")
      (require 'format-all)
      (define-format-all-formatter
        ormolu
        (:executable "ormolu")
        (:install "stack install ormolu")
        (:languages "Haskell" "Literate Haskell")
        (:features)
        (:format
         (format-all--buffer-easy
          executable
          (when (buffer-file-name)
            (list "--stdin-input-file" (buffer-file-name))))))
      (format-all--set-chain "Haskell" '(ormolu))
      ;; (format-all-mode 1)
      ))
  :config
  (use-package align
    :defer t
    :config
    (add-to-list
     'align-rules-list
     (mapcar #'(lambda (x)
                 `(,(car x)
                   (regexp . ,(cdr x))
                   (modes quote (haskell-mode haskell-literate-mode))))
             '((haskell-types       . "\\(\\s-+\\)\\(::\\|∷\\)\\s-+")
               (haskell-assignment  . "\\(\\s-+\\)=\\s-+")
               (haskell-arrows      . "\\(\\s-+\\)\\(->\\|→\\)\\s-+")
               (haskell-left-arrows . "\\(\\s-+\\)\\(<-\\|←\\)\\s-+"))))))

#+end_src



* yasnippet
#+begin_src elisp
(use-package yasnippet
  :demand t
  :diminish yas-minor-mode
  :commands yas-minor-mode-on
  ;; :bind (("C-c y d" . yas-load-directory)
  ;;        ("C-c y i" . yas-insert-snippet)
  ;;        ("C-c y f" . yas-visit-snippet-file)
  ;;        ("C-c y n" . yas-new-snippet)
  ;;        ("C-c y t" . yas-tryout-snippet)
  ;;        ("C-c y l" . yas-describe-tables)
  ;;        ("C-c y g" . yas-global-mode)
  ;;        ("C-c y m" . yas-minor-mode)
  ;;        ("C-c y r" . yas-reload-all)
  ;;        ("C-c y x" . yas-expand)
  ;;        :map yas-keymap
  ;;        ("C-i" . yas-next-field-or-maybe-expand))
  ;; TODO need to figure this out
  ;; :mode ("/\\.emacs\\.d/snippets/" . snippet-mode)
  :hook (prog-mode . yas-minor-mode-on)
  :custom
  (yas-prompt-functions '(yas-completing-prompt yas-no-prompt))
  (yas-snippet-dirs (list (emacs-path "snippets") ))
  (yas-triggers-in-field t)
  (yas-wrap-around-region t)
  :custom-face
  (yas-field-highlight-face ((t (:background "#e4edfc"))))
  :config
  (yas-load-directory (emacs-path "snippets")
                      ))

(use-package consult-yasnippet
  :after (consult yasnippet))


#+end_src


* vale
#+begin_src elisp
(use-package flycheck
  :config (global-flycheck-mode)
(flycheck-define-checker vale
  "A checker for prose"
  :command ("vale" "--output" "line"
            source)
  :standard-input nil
  :error-patterns
  ((error line-start (file-name) ":" line ":" column ":" (id (one-or-more (not (any ":")))) ":" (message) line-end))
  :modes (markdown-mode gfm-mode org-mode text-mode))
 (add-to-list 'flycheck-checkers 'vale 'append))

#+end_src

*  project

copied for https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/init.el

#+begin_src elisp
  (use-package project
    :preface
     (defun project-magit-status ()
      "Run magit-status in the current project's root."
      (interactive)
      (magit-status-setup-buffer (project-root (project-current t))))
    :custom
    (project-switch-commands
     '((?f "Find file" project-find-file)
            (?g "Find regexp" project-find-regexp)
            (?d "Dired" project-dired)
            (?b "Buffer" project-switch-to-buffer)
            (?q "Query replace" project-query-replace-regexp)
            (?v "magit" project-magit-status)
            (?k "Kill buffers" project-kill-buffers)
            (?! "Shell command" project-shell-command)
            (?e "Eshell" project-eshell)))

    )
#+end_src

* zoom

#+begin_src elisp
  (use-package zoom
  :bind ("C-x +" . zoom)
  :custom
  (zoom-size 'size-callback)
  :preface
  (defun size-callback ()
    (cond ((> (frame-pixel-width) 1280) '(90 . 0.75))
          (t '(0.5 . 0.5)))))
#+end_src


#+end_src

* markdown-mode
#+begin_src elisp
  (use-package markdown-mode
    :demand t
    :mode (("\\`README\\.md\\'" . gfm-mode)
           ("\\.md\\'"          . markdown-mode)
           ("\\.markdown\\'"    . markdown-mode))
    :custom
    (markdown-command "pandoc -f markdown_github+smart")
    (markdown-command-needs-filename t)
    (markdown-enable-math t)
    (markdown-open-command "marked")
    :custom-face
    (markdown-header-face-1 ((t (:inherit markdown-header-face :height 2.0))))
    (markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.6))))
    (markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.4))))
    (markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.2))))
    :init
    (setq markdown-command "multimarkdown")
 )

#+end_src
* justfile
#+begin_src elisp
 (use-package just-mode)

     (use-package justfl
        :commands justl-exec-recipe)
#+end_src
* org
#+begin_src elisp
(use-package org
  :config
  (setq org-directory  "~/org/")
  (setq org-agenda-files (append
                           (file-expand-wildcards (concat org-directory "*.org"))
                           (file-expand-wildcards (concat org-directory "agenda/*.org"))
                           (file-expand-wildcards (concat org-directory "projects/*.org"))))
  (setq  org-default-notes-file (concat org-directory "agenda/inbox.org"))
 )

#+end_src

* org-roam

using nix as emacs package manager can be werid sometime.

due the file strutcture, i have to do the nested config

#+begin_src elisp

   (use-package org-roam
   :custom
     (org-roam-directory (concat org-directory "roam/"))

   :bind (("C-c n l" . org-roam-buffer-toggle)
          ("C-c n f" . org-roam-node-find)
          ("C-c n i" . org-roam-node-insert)
          ("C-c n c" . org-roam-capture)
          ("C-c n j" . org-roam-dailies-capture-today)
          ("C-c n g" . org-roam-dailies-goto-today)
          )
          ;; Dailies

   :config
   (use-package org-roam-dailies)

   ;; If you're using a vertical completion framework, you might want a more informative completion interface
  ;; (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (setq org-roam-dailies-directory "daily/")
    (setq org-roam-dailies-capture-templates
       '(("d" "default" entry
          "* %?"
          :target (file+head "%<%Y-%m-%d>.org"
                             "#+title: %<%Y-%m-%d>\n* Tasks to do \n* Journal \n* TIL \n"))))


   (org-roam-db-autosync-mode)
   ;; If using org-roam-protocol
  ;; (require 'org-roam-protocol)
   )

 #+end_src




* hydra

https://github.com/Ladicle/hydra-posframe
vs https://github.com/jerrypnz/major-mode-hydra.el
vs
https://gitlab.com/to1ne/use-package-hydra/


https://github.com/jerrypnz/.emacs.d/blob/master/config/jp-hydra.el
major mode hydra seems still maintained and in nix package

example in here

https://github.com/jerrypnz/.emacs.d/blob/c5023ba23579a70c17e168502bcd79b6db84c151/config/jp-base.el#L101

this main menu is probably written using transient, since we are not going to compose it
the loading order on this is tricky, need wrap my head of :define :function

right now the hydra is not repeatable, kind of missing the point. need to figure out how to setup correctly

blue pill means back. red pill means stay
how add winner undo here
#+begin_src elisp
    (use-package hydra
      :config
  (defhydra my-window-movement ()
    "window movement"
      ("h" windmove-left "up")
      ("o" windmove-right "->")
      ("a" windmove-down "down")
      ("i" windmove-up "up")
      ("n" other-window "next")
      ("*" enlarge-window "h+" )
      ("@" shrink-window "h-" )
      ("$" enlarge-window-horizontally "w+" )
      ("^" shrink-window-horizontally "w-" )
      ("f" find-file-other-window "other file")

      ("d" delete-other-windows :color blue)
      ("j" ace-window "ace-window")
      ("v" (lambda ()
         (interactive)
         (split-window-right)
         (windmove-right)) "split right")
      ("s" (lambda ()
         (interactive)
         (split-window-below)
         (windmove-down)) "below")
      ("k" delete-window "delete")
      ("r" winner-redo "redo")
      ("u" winner-undo "undo")
      ("D" ace-delete-window "ace delete") ;; TODO not working
      ("m" ace-maximize-window "maximize" :color blue) ;; TODO not working
      ("q" nil "cancel"))

  (defhydra hydra-main-menu (:color blue)
        "main menu"
       ("p" project-switch-project "switch projects")
       ("g" magit "magit")
       ("n" org-roam-node-find "find note")
       ("t" org-roam-dailies-goto-today "today note")
       ("q" nil "cancel"))

      (defhydra hydra-search-menu (:color blue)
        "search menu"
       ("l" consult-line "search line")
       ("r" consult-ripgrep "search word")
       ("f" consult-fd "searc file")
       ("q" nil "cancel"))
      (meow-leader-define-key
       '("?" . hydra-main-menu/body)
       '("w" . my-window-movement/body)
       '("s" . hydra-search-menu/body)
       )

      )
  #+end_src






*  lsp-bridge
#+begin_src elisp

  ;; (require 'yasnippet)
  ;; (yas-global-mode 1)

  ;; (require 'lsp-bridge)
  ;; (global-lsp-bridge-mode)
  ;; (require 'lsp-bridge-jdtls)
  ;; (setq lsp-bridge-jdtls-jvm-args  (list (concat "-javaagent:" (getenv "LOMBOK_DIR") "/lombok.jar")))
  ;; (setq lsp-bridge-enable-auto-import t)
#+end_src
